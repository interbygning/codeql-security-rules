// CodeQL database schema for Solidity
// Automatically generated from the tree-sitter grammar; do not edit

/*- Files and folders -*/

/**
 * The location of an element.
 * The location spans column `startcolumn` of line `startline` to
 * column `endcolumn` of line `endline` in file `file`.
 * For more information, see
 * [Locations](https://codeql.github.com/docs/writing-codeql-queries/providing-locations-in-codeql-queries/).
 */
locations_default(
  unique int id: @location_default,
  int file: @file ref,
  int beginLine: int ref,
  int beginColumn: int ref,
  int endLine: int ref,
  int endColumn: int ref
);

files(
  unique int id: @file,
  string name: string ref
);

folders(
  unique int id: @folder,
  string name: string ref
);

@container = @file | @folder

containerparent(
  int parent: @container ref,
  unique int child: @container ref
);

/*- Empty location -*/

empty_location(
  int location: @location_default ref
);

/*- Source location prefix -*/

/**
 * The source location of the snapshot.
 */
sourceLocationPrefix(string prefix : string ref);

/*- Diagnostic messages -*/

diagnostics(
  unique int id: @diagnostic,
  int severity: int ref,
  string error_tag: string ref,
  string error_message: string ref,
  string full_error_message: string ref,
  int location: @location_default ref
);

/*- Diagnostic messages: severity -*/

case @diagnostic.severity of
  10 = @diagnostic_debug
| 20 = @diagnostic_info
| 30 = @diagnostic_warning
| 40 = @diagnostic_error
;

/*- YAML -*/

#keyset[parent, idx]
yaml (unique int id: @yaml_node,
      int kind: int ref,
      int parent: @yaml_node_parent ref,
      int idx: int ref,
      string tag: string ref,
      string tostring: string ref);

case @yaml_node.kind of
  0 = @yaml_scalar_node
| 1 = @yaml_mapping_node
| 2 = @yaml_sequence_node
| 3 = @yaml_alias_node
;

@yaml_collection_node = @yaml_mapping_node | @yaml_sequence_node;

@yaml_node_parent = @yaml_collection_node | @file;

yaml_anchors (unique int node: @yaml_node ref,
              string anchor: string ref);

yaml_aliases (unique int alias: @yaml_alias_node ref,
              string target: string ref);

yaml_scalars (unique int scalar: @yaml_scalar_node ref,
              int style: int ref,
              string value: string ref);

yaml_errors (unique int id: @yaml_error,
             string message: string ref);

yaml_locations(unique int locatable: @yaml_locatable ref,
             int location: @location_default ref);

@yaml_locatable = @yaml_node | @yaml_error;

/*- Solidity dbscheme -*/
@solidity_any_pragma_token_child_type = @solidity_token_identifier | @solidity_token_pragma_value

#keyset[solidity_any_pragma_token, index]
solidity_any_pragma_token_child(
  int solidity_any_pragma_token: @solidity_any_pragma_token ref,
  int index: int ref,
  unique int child: @solidity_any_pragma_token_child_type ref
);

solidity_any_pragma_token_def(
  unique int id: @solidity_any_pragma_token
);

solidity_array_access_index(
  unique int solidity_array_access: @solidity_array_access ref,
  unique int index: @solidity_expression ref
);

solidity_array_access_def(
  unique int id: @solidity_array_access,
  int base: @solidity_expression ref
);

#keyset[solidity_assembly_flags, index]
solidity_assembly_flags_child(
  int solidity_assembly_flags: @solidity_assembly_flags ref,
  int index: int ref,
  unique int child: @solidity_token_string ref
);

solidity_assembly_flags_def(
  unique int id: @solidity_assembly_flags
);

@solidity_assembly_statement_child_type = @solidity_assembly_flags | @solidity_token_yul_boolean | @solidity_token_yul_break | @solidity_token_yul_continue | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_token_yul_leave | @solidity_yul_assignment | @solidity_yul_block | @solidity_yul_for_statement | @solidity_yul_function_call | @solidity_yul_function_definition | @solidity_yul_if_statement | @solidity_yul_label | @solidity_yul_string_literal | @solidity_yul_switch_statement | @solidity_yul_variable_declaration

#keyset[solidity_assembly_statement, index]
solidity_assembly_statement_child(
  int solidity_assembly_statement: @solidity_assembly_statement ref,
  int index: int ref,
  unique int child: @solidity_assembly_statement_child_type ref
);

solidity_assembly_statement_def(
  unique int id: @solidity_assembly_statement
);

solidity_assignment_expression_def(
  unique int id: @solidity_assignment_expression,
  int left: @solidity_expression ref,
  int right: @solidity_expression ref
);

solidity_augmented_assignment_expression_def(
  unique int id: @solidity_augmented_assignment_expression,
  int left: @solidity_expression ref,
  int right: @solidity_expression ref
);

case @solidity_binary_expression.operator of
  0 = @solidity_binary_expression_bangequal
| 1 = @solidity_binary_expression_bangequalequal
| 2 = @solidity_binary_expression_percent
| 3 = @solidity_binary_expression_ampersand
| 4 = @solidity_binary_expression_ampersandampersand
| 5 = @solidity_binary_expression_star
| 6 = @solidity_binary_expression_starstar
| 7 = @solidity_binary_expression_plus
| 8 = @solidity_binary_expression_minus
| 9 = @solidity_binary_expression_slash
| 10 = @solidity_binary_expression_langle
| 11 = @solidity_binary_expression_langlelangle
| 12 = @solidity_binary_expression_langleequal
| 13 = @solidity_binary_expression_equalequal
| 14 = @solidity_binary_expression_rangle
| 15 = @solidity_binary_expression_rangleequal
| 16 = @solidity_binary_expression_ranglerangle
| 17 = @solidity_binary_expression_rangleranglerangle
| 18 = @solidity_binary_expression_caret
| 19 = @solidity_binary_expression_pipe
| 20 = @solidity_binary_expression_pipepipe
;


solidity_binary_expression_def(
  unique int id: @solidity_binary_expression,
  int left: @solidity_expression ref,
  int operator: int ref,
  int right: @solidity_expression ref
);

@solidity_block_statement_child_type = @solidity_statement | @solidity_token_unchecked

#keyset[solidity_block_statement, index]
solidity_block_statement_child(
  int solidity_block_statement: @solidity_block_statement ref,
  int index: int ref,
  unique int child: @solidity_block_statement_child_type ref
);

solidity_block_statement_def(
  unique int id: @solidity_block_statement
);

@solidity_boolean_literal_child_type = @solidity_token_false | @solidity_token_true

solidity_boolean_literal_def(
  unique int id: @solidity_boolean_literal,
  int child: @solidity_boolean_literal_child_type ref
);

@solidity_call_argument_child_type = @solidity_call_struct_argument | @solidity_expression

#keyset[solidity_call_argument, index]
solidity_call_argument_child(
  int solidity_call_argument: @solidity_call_argument ref,
  int index: int ref,
  unique int child: @solidity_call_argument_child_type ref
);

solidity_call_argument_def(
  unique int id: @solidity_call_argument
);

#keyset[solidity_call_expression, index]
solidity_call_expression_child(
  int solidity_call_expression: @solidity_call_expression ref,
  int index: int ref,
  unique int child: @solidity_call_argument ref
);

solidity_call_expression_def(
  unique int id: @solidity_call_expression,
  int function: @solidity_expression ref
);

solidity_call_struct_argument_def(
  unique int id: @solidity_call_struct_argument,
  int name: @solidity_token_identifier ref,
  int value: @solidity_expression ref
);

@solidity_catch_clause_child_type = @solidity_parameter | @solidity_token_identifier

#keyset[solidity_catch_clause, index]
solidity_catch_clause_child(
  int solidity_catch_clause: @solidity_catch_clause ref,
  int index: int ref,
  unique int child: @solidity_catch_clause_child_type ref
);

solidity_catch_clause_def(
  unique int id: @solidity_catch_clause,
  int body: @solidity_block_statement ref
);

solidity_constant_variable_declaration_def(
  unique int id: @solidity_constant_variable_declaration,
  int name: @solidity_token_identifier ref,
  int type__: @solidity_type_name ref,
  int value: @solidity_expression ref
);

@solidity_constructor_definition_child_type = @solidity_modifier_invocation | @solidity_parameter

#keyset[solidity_constructor_definition, index]
solidity_constructor_definition_child(
  int solidity_constructor_definition: @solidity_constructor_definition ref,
  int index: int ref,
  unique int child: @solidity_constructor_definition_child_type ref
);

solidity_constructor_definition_def(
  unique int id: @solidity_constructor_definition,
  int body: @solidity_function_body ref
);

@solidity_contract_body_child_type = @solidity_constructor_definition | @solidity_enum_declaration | @solidity_error_declaration | @solidity_event_definition | @solidity_fallback_receive_definition | @solidity_function_definition | @solidity_modifier_definition | @solidity_state_variable_declaration | @solidity_struct_declaration | @solidity_user_defined_type_definition | @solidity_using_directive

#keyset[solidity_contract_body, index]
solidity_contract_body_child(
  int solidity_contract_body: @solidity_contract_body ref,
  int index: int ref,
  unique int child: @solidity_contract_body_child_type ref
);

solidity_contract_body_def(
  unique int id: @solidity_contract_body
);

#keyset[solidity_contract_declaration, index]
solidity_contract_declaration_child(
  int solidity_contract_declaration: @solidity_contract_declaration ref,
  int index: int ref,
  unique int child: @solidity_inheritance_specifier ref
);

solidity_contract_declaration_def(
  unique int id: @solidity_contract_declaration,
  int body: @solidity_contract_body ref,
  int name: @solidity_token_identifier ref
);

solidity_do_while_statement_def(
  unique int id: @solidity_do_while_statement,
  int body: @solidity_statement ref,
  int condition: @solidity_expression ref
);

#keyset[solidity_emit_statement, index]
solidity_emit_statement_child(
  int solidity_emit_statement: @solidity_emit_statement ref,
  int index: int ref,
  unique int child: @solidity_call_argument ref
);

solidity_emit_statement_def(
  unique int id: @solidity_emit_statement,
  int name: @solidity_expression ref
);

#keyset[solidity_enum_body, index]
solidity_enum_body_child(
  int solidity_enum_body: @solidity_enum_body ref,
  int index: int ref,
  unique int child: @solidity_token_enum_value ref
);

solidity_enum_body_def(
  unique int id: @solidity_enum_body
);

solidity_enum_declaration_def(
  unique int id: @solidity_enum_declaration,
  int body: @solidity_enum_body ref,
  int name: @solidity_token_identifier ref
);

#keyset[solidity_error_declaration, index]
solidity_error_declaration_child(
  int solidity_error_declaration: @solidity_error_declaration ref,
  int index: int ref,
  unique int child: @solidity_error_parameter ref
);

solidity_error_declaration_def(
  unique int id: @solidity_error_declaration,
  int name: @solidity_token_identifier ref
);

solidity_error_parameter_name(
  unique int solidity_error_parameter: @solidity_error_parameter ref,
  unique int name: @solidity_token_identifier ref
);

solidity_error_parameter_def(
  unique int id: @solidity_error_parameter,
  int type__: @solidity_type_name ref
);

#keyset[solidity_event_definition, index]
solidity_event_definition_child(
  int solidity_event_definition: @solidity_event_definition ref,
  int index: int ref,
  unique int child: @solidity_event_parameter ref
);

solidity_event_definition_def(
  unique int id: @solidity_event_definition,
  int name: @solidity_token_identifier ref
);

solidity_event_parameter_name(
  unique int solidity_event_parameter: @solidity_event_parameter ref,
  unique int name: @solidity_token_identifier ref
);

solidity_event_parameter_def(
  unique int id: @solidity_event_parameter,
  int type__: @solidity_type_name ref
);

@solidity_expression_child_type = @solidity_array_access | @solidity_assignment_expression | @solidity_augmented_assignment_expression | @solidity_binary_expression | @solidity_boolean_literal | @solidity_call_expression | @solidity_inline_array_expression | @solidity_member_expression | @solidity_meta_type_expression | @solidity_new_expression | @solidity_number_literal | @solidity_parenthesized_expression | @solidity_payable_conversion_expression | @solidity_slice_access | @solidity_string_literal | @solidity_struct_expression | @solidity_ternary_expression | @solidity_token_hex_string_literal | @solidity_token_identifier | @solidity_token_primitive_type | @solidity_token_unicode_string_literal | @solidity_tuple_expression | @solidity_type_cast_expression | @solidity_unary_expression | @solidity_update_expression | @solidity_user_defined_type

solidity_expression_def(
  unique int id: @solidity_expression,
  int child: @solidity_expression_child_type ref
);

solidity_expression_statement_def(
  unique int id: @solidity_expression_statement,
  int child: @solidity_expression ref
);

solidity_fallback_receive_definition_body(
  unique int solidity_fallback_receive_definition: @solidity_fallback_receive_definition ref,
  unique int body: @solidity_function_body ref
);

@solidity_fallback_receive_definition_child_type = @solidity_modifier_invocation | @solidity_override_specifier | @solidity_parameter | @solidity_token_state_mutability | @solidity_token_virtual | @solidity_token_visibility

#keyset[solidity_fallback_receive_definition, index]
solidity_fallback_receive_definition_child(
  int solidity_fallback_receive_definition: @solidity_fallback_receive_definition ref,
  int index: int ref,
  unique int child: @solidity_fallback_receive_definition_child_type ref
);

solidity_fallback_receive_definition_def(
  unique int id: @solidity_fallback_receive_definition
);

@solidity_for_statement_initial_type = @solidity_expression_statement | @solidity_variable_declaration_statement

solidity_for_statement_update(
  unique int solidity_for_statement: @solidity_for_statement ref,
  unique int update: @solidity_expression ref
);

solidity_for_statement_def(
  unique int id: @solidity_for_statement,
  int body: @solidity_statement ref,
  int condition: @solidity_expression_statement ref,
  int initial: @solidity_for_statement_initial_type ref
);

#keyset[solidity_function_body, index]
solidity_function_body_child(
  int solidity_function_body: @solidity_function_body ref,
  int index: int ref,
  unique int child: @solidity_statement ref
);

solidity_function_body_def(
  unique int id: @solidity_function_body
);

solidity_function_definition_body(
  unique int solidity_function_definition: @solidity_function_definition ref,
  unique int body: @solidity_function_body ref
);

solidity_function_definition_return_type(
  unique int solidity_function_definition: @solidity_function_definition ref,
  unique int return_type: @solidity_return_type_definition ref
);

@solidity_function_definition_child_type = @solidity_modifier_invocation | @solidity_override_specifier | @solidity_parameter | @solidity_token_state_mutability | @solidity_token_virtual | @solidity_token_visibility

#keyset[solidity_function_definition, index]
solidity_function_definition_child(
  int solidity_function_definition: @solidity_function_definition ref,
  int index: int ref,
  unique int child: @solidity_function_definition_child_type ref
);

solidity_function_definition_def(
  unique int id: @solidity_function_definition,
  int name: @solidity_token_identifier ref
);

#keyset[solidity_if_statement, index]
solidity_if_statement_body(
  int solidity_if_statement: @solidity_if_statement ref,
  int index: int ref,
  unique int body: @solidity_statement ref
);

solidity_if_statement_else(
  unique int solidity_if_statement: @solidity_if_statement ref,
  unique int else: @solidity_reserved_word ref
);

solidity_if_statement_def(
  unique int id: @solidity_if_statement,
  int condition: @solidity_expression ref
);

#keyset[solidity_import_directive, index]
solidity_import_directive_alias(
  int solidity_import_directive: @solidity_import_directive ref,
  int index: int ref,
  unique int alias: @solidity_token_identifier ref
);

#keyset[solidity_import_directive, index]
solidity_import_directive_import_name(
  int solidity_import_directive: @solidity_import_directive ref,
  int index: int ref,
  unique int import_name: @solidity_token_identifier ref
);

solidity_import_directive_def(
  unique int id: @solidity_import_directive,
  int source: @solidity_token_string ref
);

@solidity_inheritance_specifier_ancestor_arguments_type = @solidity_call_argument | @solidity_reserved_word

#keyset[solidity_inheritance_specifier, index]
solidity_inheritance_specifier_ancestor_arguments(
  int solidity_inheritance_specifier: @solidity_inheritance_specifier ref,
  int index: int ref,
  unique int ancestor_arguments: @solidity_inheritance_specifier_ancestor_arguments_type ref
);

solidity_inheritance_specifier_def(
  unique int id: @solidity_inheritance_specifier,
  int ancestor: @solidity_user_defined_type ref
);

#keyset[solidity_inline_array_expression, index]
solidity_inline_array_expression_child(
  int solidity_inline_array_expression: @solidity_inline_array_expression ref,
  int index: int ref,
  unique int child: @solidity_expression ref
);

solidity_inline_array_expression_def(
  unique int id: @solidity_inline_array_expression
);

#keyset[solidity_interface_declaration, index]
solidity_interface_declaration_child(
  int solidity_interface_declaration: @solidity_interface_declaration ref,
  int index: int ref,
  unique int child: @solidity_inheritance_specifier ref
);

solidity_interface_declaration_def(
  unique int id: @solidity_interface_declaration,
  int body: @solidity_contract_body ref,
  int name: @solidity_token_identifier ref
);

solidity_library_declaration_def(
  unique int id: @solidity_library_declaration,
  int body: @solidity_contract_body ref,
  int name: @solidity_token_identifier ref
);

@solidity_member_expression_object_type = @solidity_expression | @solidity_token_identifier

solidity_member_expression_def(
  unique int id: @solidity_member_expression,
  int object: @solidity_member_expression_object_type ref,
  int property: @solidity_token_identifier ref
);

solidity_meta_type_expression_def(
  unique int id: @solidity_meta_type_expression,
  int child: @solidity_type_name ref
);

solidity_modifier_definition_body(
  unique int solidity_modifier_definition: @solidity_modifier_definition ref,
  unique int body: @solidity_function_body ref
);

@solidity_modifier_definition_child_type = @solidity_override_specifier | @solidity_parameter | @solidity_token_virtual

#keyset[solidity_modifier_definition, index]
solidity_modifier_definition_child(
  int solidity_modifier_definition: @solidity_modifier_definition ref,
  int index: int ref,
  unique int child: @solidity_modifier_definition_child_type ref
);

solidity_modifier_definition_def(
  unique int id: @solidity_modifier_definition,
  int name: @solidity_token_identifier ref
);

@solidity_modifier_invocation_child_type = @solidity_call_argument | @solidity_token_identifier

#keyset[solidity_modifier_invocation, index]
solidity_modifier_invocation_child(
  int solidity_modifier_invocation: @solidity_modifier_invocation ref,
  int index: int ref,
  unique int child: @solidity_modifier_invocation_child_type ref
);

solidity_modifier_invocation_def(
  unique int id: @solidity_modifier_invocation
);

#keyset[solidity_new_expression, index]
solidity_new_expression_child(
  int solidity_new_expression: @solidity_new_expression ref,
  int index: int ref,
  unique int child: @solidity_call_argument ref
);

solidity_new_expression_def(
  unique int id: @solidity_new_expression,
  int name: @solidity_type_name ref
);

@solidity_number_literal_child_type = @solidity_token_decimal_number | @solidity_token_hex_number | @solidity_token_number_unit

#keyset[solidity_number_literal, index]
solidity_number_literal_child(
  int solidity_number_literal: @solidity_number_literal ref,
  int index: int ref,
  unique int child: @solidity_number_literal_child_type ref
);

solidity_number_literal_def(
  unique int id: @solidity_number_literal
);

#keyset[solidity_override_specifier, index]
solidity_override_specifier_child(
  int solidity_override_specifier: @solidity_override_specifier ref,
  int index: int ref,
  unique int child: @solidity_user_defined_type ref
);

solidity_override_specifier_def(
  unique int id: @solidity_override_specifier
);

@solidity_parameter_location_type = @solidity_reserved_word

solidity_parameter_location(
  unique int solidity_parameter: @solidity_parameter ref,
  unique int location: @solidity_parameter_location_type ref
);

solidity_parameter_name(
  unique int solidity_parameter: @solidity_parameter ref,
  unique int name: @solidity_token_identifier ref
);

solidity_parameter_def(
  unique int id: @solidity_parameter,
  int type__: @solidity_type_name ref
);

solidity_parenthesized_expression_def(
  unique int id: @solidity_parenthesized_expression,
  int child: @solidity_expression ref
);

#keyset[solidity_payable_conversion_expression, index]
solidity_payable_conversion_expression_child(
  int solidity_payable_conversion_expression: @solidity_payable_conversion_expression ref,
  int index: int ref,
  unique int child: @solidity_call_argument ref
);

solidity_payable_conversion_expression_def(
  unique int id: @solidity_payable_conversion_expression
);

@solidity_pragma_directive_child_type = @solidity_any_pragma_token | @solidity_solidity_pragma_token

solidity_pragma_directive_def(
  unique int id: @solidity_pragma_directive,
  int child: @solidity_pragma_directive_child_type ref
);

@solidity_return_parameter_location_type = @solidity_reserved_word

solidity_return_parameter_location(
  unique int solidity_return_parameter: @solidity_return_parameter ref,
  unique int location: @solidity_return_parameter_location_type ref
);

solidity_return_parameter_def(
  unique int id: @solidity_return_parameter,
  int type__: @solidity_type_name ref
);

solidity_return_statement_child(
  unique int solidity_return_statement: @solidity_return_statement ref,
  unique int child: @solidity_expression ref
);

solidity_return_statement_def(
  unique int id: @solidity_return_statement
);

#keyset[solidity_return_type_definition, index]
solidity_return_type_definition_child(
  int solidity_return_type_definition: @solidity_return_type_definition ref,
  int index: int ref,
  unique int child: @solidity_parameter ref
);

solidity_return_type_definition_def(
  unique int id: @solidity_return_type_definition
);

#keyset[solidity_revert_arguments, index]
solidity_revert_arguments_child(
  int solidity_revert_arguments: @solidity_revert_arguments ref,
  int index: int ref,
  unique int child: @solidity_call_argument ref
);

solidity_revert_arguments_def(
  unique int id: @solidity_revert_arguments
);

solidity_revert_statement_error(
  unique int solidity_revert_statement: @solidity_revert_statement ref,
  unique int error: @solidity_expression ref
);

solidity_revert_statement_child(
  unique int solidity_revert_statement: @solidity_revert_statement ref,
  unique int child: @solidity_revert_arguments ref
);

solidity_revert_statement_def(
  unique int id: @solidity_revert_statement
);

solidity_slice_access_from(
  unique int solidity_slice_access: @solidity_slice_access ref,
  unique int from: @solidity_expression ref
);

solidity_slice_access_to(
  unique int solidity_slice_access: @solidity_slice_access ref,
  unique int to: @solidity_expression ref
);

solidity_slice_access_def(
  unique int id: @solidity_slice_access,
  int base: @solidity_expression ref
);

@solidity_solidity_pragma_token_version_constraint_type = @solidity_token_solidity_version | @solidity_token_solidity_version_comparison_operator

#keyset[solidity_solidity_pragma_token, index]
solidity_solidity_pragma_token_version_constraint(
  int solidity_solidity_pragma_token: @solidity_solidity_pragma_token ref,
  int index: int ref,
  unique int version_constraint: @solidity_solidity_pragma_token_version_constraint_type ref
);

solidity_solidity_pragma_token_def(
  unique int id: @solidity_solidity_pragma_token
);

@solidity_source_file_child_type = @solidity_constant_variable_declaration | @solidity_contract_declaration | @solidity_enum_declaration | @solidity_error_declaration | @solidity_event_definition | @solidity_function_definition | @solidity_import_directive | @solidity_interface_declaration | @solidity_library_declaration | @solidity_pragma_directive | @solidity_struct_declaration | @solidity_user_defined_type_definition

#keyset[solidity_source_file, index]
solidity_source_file_child(
  int solidity_source_file: @solidity_source_file ref,
  int index: int ref,
  unique int child: @solidity_source_file_child_type ref
);

solidity_source_file_def(
  unique int id: @solidity_source_file
);

solidity_state_variable_declaration_value(
  unique int solidity_state_variable_declaration: @solidity_state_variable_declaration ref,
  unique int value: @solidity_expression ref
);

#keyset[solidity_state_variable_declaration, index]
solidity_state_variable_declaration_visibility(
  int solidity_state_variable_declaration: @solidity_state_variable_declaration ref,
  int index: int ref,
  unique int visibility: @solidity_token_visibility ref
);

@solidity_state_variable_declaration_child_type = @solidity_override_specifier | @solidity_token_immutable

#keyset[solidity_state_variable_declaration, index]
solidity_state_variable_declaration_child(
  int solidity_state_variable_declaration: @solidity_state_variable_declaration ref,
  int index: int ref,
  unique int child: @solidity_state_variable_declaration_child_type ref
);

solidity_state_variable_declaration_def(
  unique int id: @solidity_state_variable_declaration,
  int name: @solidity_token_identifier ref,
  int type__: @solidity_type_name ref
);

@solidity_statement_child_type = @solidity_assembly_statement | @solidity_block_statement | @solidity_do_while_statement | @solidity_emit_statement | @solidity_expression_statement | @solidity_for_statement | @solidity_if_statement | @solidity_return_statement | @solidity_revert_statement | @solidity_token_break_statement | @solidity_token_continue_statement | @solidity_try_statement | @solidity_variable_declaration_statement | @solidity_while_statement

solidity_statement_def(
  unique int id: @solidity_statement,
  int child: @solidity_statement_child_type ref
);

#keyset[solidity_string_literal, index]
solidity_string_literal_child(
  int solidity_string_literal: @solidity_string_literal ref,
  int index: int ref,
  unique int child: @solidity_token_string ref
);

solidity_string_literal_def(
  unique int id: @solidity_string_literal
);

#keyset[solidity_struct_body, index]
solidity_struct_body_child(
  int solidity_struct_body: @solidity_struct_body ref,
  int index: int ref,
  unique int child: @solidity_struct_member ref
);

solidity_struct_body_def(
  unique int id: @solidity_struct_body
);

solidity_struct_declaration_def(
  unique int id: @solidity_struct_declaration,
  int body: @solidity_struct_body ref,
  int name: @solidity_token_identifier ref
);

#keyset[solidity_struct_expression, index]
solidity_struct_expression_child(
  int solidity_struct_expression: @solidity_struct_expression ref,
  int index: int ref,
  unique int child: @solidity_struct_field_assignment ref
);

solidity_struct_expression_def(
  unique int id: @solidity_struct_expression,
  int type__: @solidity_expression ref
);

solidity_struct_field_assignment_def(
  unique int id: @solidity_struct_field_assignment,
  int name: @solidity_token_identifier ref,
  int value: @solidity_expression ref
);

solidity_struct_member_def(
  unique int id: @solidity_struct_member,
  int name: @solidity_token_identifier ref,
  int type__: @solidity_type_name ref
);

#keyset[solidity_ternary_expression, index]
solidity_ternary_expression_child(
  int solidity_ternary_expression: @solidity_ternary_expression ref,
  int index: int ref,
  unique int child: @solidity_expression ref
);

solidity_ternary_expression_def(
  unique int id: @solidity_ternary_expression
);

@solidity_try_statement_child_type = @solidity_catch_clause | @solidity_parameter

#keyset[solidity_try_statement, index]
solidity_try_statement_child(
  int solidity_try_statement: @solidity_try_statement ref,
  int index: int ref,
  unique int child: @solidity_try_statement_child_type ref
);

solidity_try_statement_def(
  unique int id: @solidity_try_statement,
  int attempt: @solidity_expression ref,
  int body: @solidity_block_statement ref
);

#keyset[solidity_tuple_expression, index]
solidity_tuple_expression_child(
  int solidity_tuple_expression: @solidity_tuple_expression ref,
  int index: int ref,
  unique int child: @solidity_expression ref
);

solidity_tuple_expression_def(
  unique int id: @solidity_tuple_expression
);

#keyset[solidity_type_alias, index]
solidity_type_alias_child(
  int solidity_type_alias: @solidity_type_alias ref,
  int index: int ref,
  unique int child: @solidity_token_identifier ref
);

solidity_type_alias_def(
  unique int id: @solidity_type_alias
);

@solidity_type_cast_expression_child_type = @solidity_call_argument | @solidity_token_primitive_type

#keyset[solidity_type_cast_expression, index]
solidity_type_cast_expression_child(
  int solidity_type_cast_expression: @solidity_type_cast_expression ref,
  int index: int ref,
  unique int child: @solidity_type_cast_expression_child_type ref
);

solidity_type_cast_expression_def(
  unique int id: @solidity_type_cast_expression
);

solidity_type_name_key_identifier(
  unique int solidity_type_name: @solidity_type_name ref,
  unique int key_identifier: @solidity_token_identifier ref
);

@solidity_type_name_key_type_type = @solidity_token_primitive_type | @solidity_user_defined_type

solidity_type_name_key_type(
  unique int solidity_type_name: @solidity_type_name ref,
  unique int key_type: @solidity_type_name_key_type_type ref
);

@solidity_type_name_parameters_type = @solidity_parameter | @solidity_reserved_word

#keyset[solidity_type_name, index]
solidity_type_name_parameters(
  int solidity_type_name: @solidity_type_name ref,
  int index: int ref,
  unique int parameters: @solidity_type_name_parameters_type ref
);

solidity_type_name_value_identifier(
  unique int solidity_type_name: @solidity_type_name ref,
  unique int value_identifier: @solidity_token_identifier ref
);

solidity_type_name_value_type(
  unique int solidity_type_name: @solidity_type_name ref,
  unique int value_type: @solidity_type_name ref
);

@solidity_type_name_child_type = @solidity_expression | @solidity_return_parameter | @solidity_token_primitive_type | @solidity_token_state_mutability | @solidity_token_visibility | @solidity_type_name | @solidity_user_defined_type

#keyset[solidity_type_name, index]
solidity_type_name_child(
  int solidity_type_name: @solidity_type_name ref,
  int index: int ref,
  unique int child: @solidity_type_name_child_type ref
);

solidity_type_name_def(
  unique int id: @solidity_type_name
);

case @solidity_unary_expression.operator of
  0 = @solidity_unary_expression_bang
| 1 = @solidity_unary_expression_plus
| 2 = @solidity_unary_expression_minus
| 3 = @solidity_unary_expression_delete
| 4 = @solidity_unary_expression_tilde
;


solidity_unary_expression_def(
  unique int id: @solidity_unary_expression,
  int argument: @solidity_expression ref,
  int operator: int ref
);

case @solidity_update_expression.operator of
  0 = @solidity_update_expression_plusplus
| 1 = @solidity_update_expression_minusminus
;


solidity_update_expression_def(
  unique int id: @solidity_update_expression,
  int argument: @solidity_expression ref,
  int operator: int ref
);

#keyset[solidity_user_defined_type, index]
solidity_user_defined_type_child(
  int solidity_user_defined_type: @solidity_user_defined_type ref,
  int index: int ref,
  unique int child: @solidity_token_identifier ref
);

solidity_user_defined_type_def(
  unique int id: @solidity_user_defined_type
);

solidity_user_defined_type_definition_def(
  unique int id: @solidity_user_defined_type_definition,
  int name: @solidity_token_identifier ref,
  int child: @solidity_token_primitive_type ref
);

@solidity_using_directive_source_type = @solidity_token_any_source_type | @solidity_type_name

solidity_using_directive_def(
  unique int id: @solidity_using_directive,
  int source: @solidity_using_directive_source_type ref,
  int child: @solidity_type_alias ref
);

@solidity_variable_declaration_location_type = @solidity_reserved_word

solidity_variable_declaration_location(
  unique int solidity_variable_declaration: @solidity_variable_declaration ref,
  unique int location: @solidity_variable_declaration_location_type ref
);

solidity_variable_declaration_def(
  unique int id: @solidity_variable_declaration,
  int name: @solidity_token_identifier ref,
  int type__: @solidity_type_name ref
);

solidity_variable_declaration_statement_value(
  unique int solidity_variable_declaration_statement: @solidity_variable_declaration_statement ref,
  unique int value: @solidity_expression ref
);

@solidity_variable_declaration_statement_child_type = @solidity_variable_declaration | @solidity_variable_declaration_tuple

solidity_variable_declaration_statement_def(
  unique int id: @solidity_variable_declaration_statement,
  int child: @solidity_variable_declaration_statement_child_type ref
);

@solidity_variable_declaration_tuple_child_type = @solidity_token_identifier | @solidity_variable_declaration

#keyset[solidity_variable_declaration_tuple, index]
solidity_variable_declaration_tuple_child(
  int solidity_variable_declaration_tuple: @solidity_variable_declaration_tuple ref,
  int index: int ref,
  unique int child: @solidity_variable_declaration_tuple_child_type ref
);

solidity_variable_declaration_tuple_def(
  unique int id: @solidity_variable_declaration_tuple
);

solidity_while_statement_def(
  unique int id: @solidity_while_statement,
  int body: @solidity_statement ref,
  int condition: @solidity_expression ref
);

@solidity_yul_assignment_child_type = @solidity_token_yul_boolean | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_yul_function_call | @solidity_yul_path | @solidity_yul_string_literal

#keyset[solidity_yul_assignment, index]
solidity_yul_assignment_child(
  int solidity_yul_assignment: @solidity_yul_assignment ref,
  int index: int ref,
  unique int child: @solidity_yul_assignment_child_type ref
);

solidity_yul_assignment_def(
  unique int id: @solidity_yul_assignment
);

@solidity_yul_block_child_type = @solidity_token_yul_boolean | @solidity_token_yul_break | @solidity_token_yul_continue | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_token_yul_leave | @solidity_yul_assignment | @solidity_yul_block | @solidity_yul_for_statement | @solidity_yul_function_call | @solidity_yul_function_definition | @solidity_yul_if_statement | @solidity_yul_label | @solidity_yul_string_literal | @solidity_yul_switch_statement | @solidity_yul_variable_declaration

#keyset[solidity_yul_block, index]
solidity_yul_block_child(
  int solidity_yul_block: @solidity_yul_block ref,
  int index: int ref,
  unique int child: @solidity_yul_block_child_type ref
);

solidity_yul_block_def(
  unique int id: @solidity_yul_block
);

@solidity_yul_for_statement_child_type = @solidity_token_yul_boolean | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_yul_block | @solidity_yul_function_call | @solidity_yul_path | @solidity_yul_string_literal

#keyset[solidity_yul_for_statement, index]
solidity_yul_for_statement_child(
  int solidity_yul_for_statement: @solidity_yul_for_statement ref,
  int index: int ref,
  unique int child: @solidity_yul_for_statement_child_type ref
);

solidity_yul_for_statement_def(
  unique int id: @solidity_yul_for_statement
);

@solidity_yul_function_call_function_type = @solidity_token_yul_evm_builtin | @solidity_yul_identifier

@solidity_yul_function_call_child_type = @solidity_token_yul_boolean | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_yul_function_call | @solidity_yul_path | @solidity_yul_string_literal

#keyset[solidity_yul_function_call, index]
solidity_yul_function_call_child(
  int solidity_yul_function_call: @solidity_yul_function_call ref,
  int index: int ref,
  unique int child: @solidity_yul_function_call_child_type ref
);

solidity_yul_function_call_def(
  unique int id: @solidity_yul_function_call,
  int function: @solidity_yul_function_call_function_type ref
);

@solidity_yul_function_definition_child_type = @solidity_yul_block | @solidity_yul_identifier

#keyset[solidity_yul_function_definition, index]
solidity_yul_function_definition_child(
  int solidity_yul_function_definition: @solidity_yul_function_definition ref,
  int index: int ref,
  unique int child: @solidity_yul_function_definition_child_type ref
);

solidity_yul_function_definition_def(
  unique int id: @solidity_yul_function_definition
);

solidity_yul_identifier_def(
  unique int id: @solidity_yul_identifier,
  int child: @solidity_token_identifier ref
);

@solidity_yul_if_statement_child_type = @solidity_token_yul_boolean | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_yul_block | @solidity_yul_function_call | @solidity_yul_path | @solidity_yul_string_literal

#keyset[solidity_yul_if_statement, index]
solidity_yul_if_statement_child(
  int solidity_yul_if_statement: @solidity_yul_if_statement ref,
  int index: int ref,
  unique int child: @solidity_yul_if_statement_child_type ref
);

solidity_yul_if_statement_def(
  unique int id: @solidity_yul_if_statement
);

solidity_yul_label_def(
  unique int id: @solidity_yul_label,
  int child: @solidity_token_identifier ref
);

#keyset[solidity_yul_path, index]
solidity_yul_path_child(
  int solidity_yul_path: @solidity_yul_path ref,
  int index: int ref,
  unique int child: @solidity_yul_identifier ref
);

solidity_yul_path_def(
  unique int id: @solidity_yul_path
);

solidity_yul_string_literal_def(
  unique int id: @solidity_yul_string_literal,
  int child: @solidity_token_string ref
);

@solidity_yul_switch_statement_child_type = @solidity_token_yul_boolean | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_yul_block | @solidity_yul_function_call | @solidity_yul_path | @solidity_yul_string_literal

#keyset[solidity_yul_switch_statement, index]
solidity_yul_switch_statement_child(
  int solidity_yul_switch_statement: @solidity_yul_switch_statement ref,
  int index: int ref,
  unique int child: @solidity_yul_switch_statement_child_type ref
);

solidity_yul_switch_statement_def(
  unique int id: @solidity_yul_switch_statement
);

@solidity_yul_variable_declaration_left_type = @solidity_reserved_word | @solidity_yul_identifier

#keyset[solidity_yul_variable_declaration, index]
solidity_yul_variable_declaration_left(
  int solidity_yul_variable_declaration: @solidity_yul_variable_declaration ref,
  int index: int ref,
  unique int left: @solidity_yul_variable_declaration_left_type ref
);

@solidity_yul_variable_declaration_right_type = @solidity_token_yul_boolean | @solidity_token_yul_decimal_number | @solidity_token_yul_hex_number | @solidity_yul_function_call | @solidity_yul_path | @solidity_yul_string_literal

solidity_yul_variable_declaration_right(
  unique int solidity_yul_variable_declaration: @solidity_yul_variable_declaration ref,
  unique int right: @solidity_yul_variable_declaration_right_type ref
);

solidity_yul_variable_declaration_def(
  unique int id: @solidity_yul_variable_declaration
);

solidity_tokeninfo(
  unique int id: @solidity_token,
  int kind: int ref,
  string value: string ref
);

case @solidity_token.kind of
  0 = @solidity_reserved_word
| 1 = @solidity_token_any_source_type
| 2 = @solidity_token_break_statement
| 3 = @solidity_token_comment
| 4 = @solidity_token_continue_statement
| 5 = @solidity_token_decimal_number
| 6 = @solidity_token_enum_value
| 7 = @solidity_token_false
| 8 = @solidity_token_hex_number
| 9 = @solidity_token_hex_string_literal
| 10 = @solidity_token_identifier
| 11 = @solidity_token_immutable
| 12 = @solidity_token_number_unit
| 13 = @solidity_token_pragma_value
| 14 = @solidity_token_primitive_type
| 15 = @solidity_token_solidity_version
| 16 = @solidity_token_solidity_version_comparison_operator
| 17 = @solidity_token_state_mutability
| 18 = @solidity_token_string
| 19 = @solidity_token_true
| 20 = @solidity_token_unchecked
| 21 = @solidity_token_unicode_string_literal
| 22 = @solidity_token_virtual
| 23 = @solidity_token_visibility
| 24 = @solidity_token_yul_boolean
| 25 = @solidity_token_yul_break
| 26 = @solidity_token_yul_continue
| 27 = @solidity_token_yul_decimal_number
| 28 = @solidity_token_yul_evm_builtin
| 29 = @solidity_token_yul_hex_number
| 30 = @solidity_token_yul_leave
;


@solidity_ast_node = @solidity_any_pragma_token | @solidity_array_access | @solidity_assembly_flags | @solidity_assembly_statement | @solidity_assignment_expression | @solidity_augmented_assignment_expression | @solidity_binary_expression | @solidity_block_statement | @solidity_boolean_literal | @solidity_call_argument | @solidity_call_expression | @solidity_call_struct_argument | @solidity_catch_clause | @solidity_constant_variable_declaration | @solidity_constructor_definition | @solidity_contract_body | @solidity_contract_declaration | @solidity_do_while_statement | @solidity_emit_statement | @solidity_enum_body | @solidity_enum_declaration | @solidity_error_declaration | @solidity_error_parameter | @solidity_event_definition | @solidity_event_parameter | @solidity_expression | @solidity_expression_statement | @solidity_fallback_receive_definition | @solidity_for_statement | @solidity_function_body | @solidity_function_definition | @solidity_if_statement | @solidity_import_directive | @solidity_inheritance_specifier | @solidity_inline_array_expression | @solidity_interface_declaration | @solidity_library_declaration | @solidity_member_expression | @solidity_meta_type_expression | @solidity_modifier_definition | @solidity_modifier_invocation | @solidity_new_expression | @solidity_number_literal | @solidity_override_specifier | @solidity_parameter | @solidity_parenthesized_expression | @solidity_payable_conversion_expression | @solidity_pragma_directive | @solidity_return_parameter | @solidity_return_statement | @solidity_return_type_definition | @solidity_revert_arguments | @solidity_revert_statement | @solidity_slice_access | @solidity_solidity_pragma_token | @solidity_source_file | @solidity_state_variable_declaration | @solidity_statement | @solidity_string_literal | @solidity_struct_body | @solidity_struct_declaration | @solidity_struct_expression | @solidity_struct_field_assignment | @solidity_struct_member | @solidity_ternary_expression | @solidity_token | @solidity_try_statement | @solidity_tuple_expression | @solidity_type_alias | @solidity_type_cast_expression | @solidity_type_name | @solidity_unary_expression | @solidity_update_expression | @solidity_user_defined_type | @solidity_user_defined_type_definition | @solidity_using_directive | @solidity_variable_declaration | @solidity_variable_declaration_statement | @solidity_variable_declaration_tuple | @solidity_while_statement | @solidity_yul_assignment | @solidity_yul_block | @solidity_yul_for_statement | @solidity_yul_function_call | @solidity_yul_function_definition | @solidity_yul_identifier | @solidity_yul_if_statement | @solidity_yul_label | @solidity_yul_path | @solidity_yul_string_literal | @solidity_yul_switch_statement | @solidity_yul_variable_declaration

solidity_ast_node_location(
  unique int node: @solidity_ast_node ref,
  int loc: @location_default ref
);

#keyset[parent, parent_index]
solidity_ast_node_parent(
  unique int node: @solidity_ast_node ref,
  int parent: @solidity_ast_node ref,
  int parent_index: int ref
);

